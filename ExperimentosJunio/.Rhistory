TotalHomicidios <- c(14493, 15128, 16594, 16040, 15839, 15612, 14505, 13552, 13656, 12249, 10737, 10285, 10088, 10087, 9329, 9921, 10452, 8867, 14006, 19803, 25757, 27213, 25967, 23063, 20010, 20762, 24559)
HombresHomicidios <- c(12932, 13553, 14935, 14468, 14343, 14067, 13030, 12166, 12111, 10827, 9442, 8986, 8797, 8754, 8115, 8610, 9143, 7776, 12574, 17838, 23285, 24257, 22986, 20280, 17503, 18293, 21673)
PoblacionTotal <- c(87064847, 88630941, 90132585, 91600655, 93055300, 94490336, 95876664, 97204604, 98485424, 99706067, 100895811, 102122295, 103417944, 104719891, 105951569, 107151011, 108408827, 109787388, 111299015, 112852594, 114255555, 115682868, 117053750, 118395054, 119713204, 121005815, 122273473)
PoblacionHombres <- c(43493548, 44213796, 44907263, 45585635, 46255724, 46907258, 47522178, 48097669, 48636351, 49141782, 49664815, 50225212, 50800740, 51371853, 51916944, 52449843, 53011285, 53646464, 54373653, 55144845, 55801919, 56519798, 57174268, 57810955, 58435900, 59046837, 59644308)
Tasa <- c()
for (i in 1:length(PoblacionTotal)){
tasa = (TotalHomicidios[i] / PoblacionTotal[i]) * 100000
Tasa <- c(Tasa, tasa)
}
Homicidios <- data.frame(cbind(TotalHomicidios, PoblacionTotal, Tasa))
print(shapiro.test(Homicidios[,3]))
#Como tenemos que el p-valor es mayor que 0.05 no podemos rechazar que la distribución de los valores sea normal.
print(t.test(Homicidios[,3], mu = 15.3))
TasaHombres <- c()
for (i in 1:length(PoblacionHombres)){
tasahombres = (HombresHomicidios[i] / PoblacionHombres[i]) * 100000
TasaHombres <- c(TasaHombres, tasahombres)
}
HomicidiosHombres <- data.frame(cbind(HombresHomicidios, PoblacionHombres, TasaHombres))
print(shapiro.test(HomicidiosHombres[,3]))
#Como tenemos que el p-valor es mayor que 0.05 no podemos rechazar que la distribución de los valores sea normal.
print(t.test(HomicidiosHombres[,3], mu = 30))
savehistory("~/Documents/SegundoSemestre/DiseñodeExperimentos/PruebaHipotesisHomicidios.Rhistory")
source('~/Documents/SegundoSemestre/DiseñodeExperimentos/PruebaHipotesis.R')
source('~/Documents/SegundoSemestre/DiseñodeExperimentos/PruebaHipotesis.R')
View(Homicidios)
View(HomicidiosHombres)
source('~/Documents/SegundoSemestre/DiseñodeExperimentos/PruebaHipotesis.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(Tasa)
plot(Tasa,type = "l")
plot(Tasa,type = "l",xlab="Meses transcurridos")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupaciòn en Mèxico")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupación en Mèxico")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupación en México", col="red")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupación en México", col="blue")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupación en México", col="sky blue")
plot(Tasa,type = "l",xlab="Meses transcurridos", main = "Tasas de desocupación en México", col="blue")
source('~/Desktop/TareaDiseño.R')
source('~/Desktop/TareaDiseño.R')
source('~/.active-rstudio-document')
View(resultados)
source('~/.active-rstudio-document')
View(resultados)
source('~/.active-rstudio-document')
View(resultados)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(resultados)
source('~/.active-rstudio-document')
View(resultados)
View(resultados)
pasos <- c()
estados <- c()
for (r in 1:20){
estado <-1
camino <- c(1)
for (i in 1:30){
aleatorio <- runif(1,0,1)
avanza <- c(seq(estado+1,2*estado,1))
if (aleatorio <= 0.5){
estado <- estado-1
}
if (aleatorio > 0.5){
if (estado == 1){
estado <- 2
}
else{
estado<- sample(avanza,1)
}
}
camino <- c(camino,estado)
if (estado == 0) break
}
estados <- c(estados, estado)
pasos <- c(pasos, length(camino)-1)
print(paste("camino",r))
print(camino)
}
resultados <- data.frame()
resultados <- rbind(resultados, as.numeric(pasos), as.numeric(estados))
resultados <- t(resultados)
colnames(resultados) <- c("Pasos", "Estado")
rownames(resultados) <- seq(1,20,1)
contador <- 0
for (cc in 1:length(as.numeric(resultados[,2]))){
if (resultados[cc,2]==0){
contador <- contador+1
}
}
print("Probabilidad de ocurrencia de llegar al estado 0")
print (contador / 20)
source('~/.active-rstudio-document')
source('/Volumes/ADVANCES/p5.R')
install.packages("distr")
source('/Volumes/ADVANCES/p5.R')
install.packages("doParallel")
source('/Volumes/ADVANCES/p5.R')
install.packages("iterators")
source('/Volumes/ADVANCES/p5.R')
#VARIABLEs
replicas<-30
muestras<-c(50000, 60000,70000,80000,90000)
desde <- 3
hasta <- 7
cuantos<-500
wolfram<-0.048834
#FUNCIONES
f <- function(x) { return(1 / (exp(x) + exp(-x))) }
g <- function(x) { return((2 / pi) * f(x)) }
suppressMessages(library(distr))
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
parte <- function() {
valores <- generador(n)
return(p <- sum(valores >= desde & valores <= hasta))
}
datos<-data.frame()
digitos <- numeric()
wolframs <- numeric()
replica<-numeric()
muestra<-numeric()
numeros<-numeric()
for(n in muestras){
for(r in 1:replicas){
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
montecarlo <- foreach(i = 1:cuantos, .combine=c) %dopar% parte()
stopImplicitCluster()
integral <- sum(montecarlo) / (cuantos * n)
numero=(pi / 2) * integral
numeros<-c(numeros,numero)
for(i in 1:6){
if((signif(numero,digits = i))==(signif(wolframs,digits = i))){
digito=i
}
else{
break
}
}
digitos<-c(digitos,digito)
}
}
signif(numero,digits = i) == signif(wolframs,digits = i)
i
for(i in 1:6){
if(signif(numero,digits = i) == signif(wolframs,digits = i)){
digito=i
}
else{
break
}
}
digitos<-c(digitos,digito)
signif(numero,digits = i)
signif(wolframs,digits = i)
for(i in 1:6){
if(signif(numero,digits = i) == signif(wolfram,digits = i)){
digito=i
}
else{
break
}
}
for(n in muestras){
for(r in 1:replicas){
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
montecarlo <- foreach(i = 1:cuantos, .combine=c) %dopar% parte()
stopImplicitCluster()
integral <- sum(montecarlo) / (cuantos * n)
numero=(pi / 2) * integral
numeros<-c(numeros,numero)
for(i in 1:6){
if(signif(numero,digits = i) == signif(wolfram,digits = i)){
digito=i
}
else{
break
}
}
digitos<-c(digitos,digito)
}
}
source('/Volumes/ADVANCES/p5.R')
for (i in 1:length(trabajo[,1])){
for (j in 1:periodos){
for (k in 1:length(totalPiezas[,1])){
if ((i-1) == totalPiezas[k,4] && trabajo[i,j+periodos*(m-1)] == totalPiezas[k,3] && totalPiezas[k,1] == (m-1)){
hechasTipo[i,j+periodos*(m-1)] = totalPiezas[k,2]
hechasCantidad[i,j+periodos*(m-1)] = totalPiezas[k,5]
totalPiezas <- totalPiezas[-k,]
break
}
}
}
}
source('~/Documents/TesisBetty/Codigos/Experimentos170619/Instances.R')
setwd("~/Documents/TesisBetty/Codigos/Experimentos170619")
source('~/Documents/TesisBetty/Codigos/Experimentos170619/Instances.R')
source('~/Documents/TesisBetty/Codigos/Experimentos170619/Instances.R')
